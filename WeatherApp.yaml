swagger: "2.0"
info:
  description: "This is a simple example of API contract for a simplified Student Information System using OpenAPI Specification  You can find out more about OpenAPI at https://www.openapis.org/ and Swagger at http://swagger.io."
  version: "1.0.0"
  title: "WeatherApp"
  termsOfService: "https://atmospherics.com/studentinfo/terms/"
  contact:
    email: "studentinfo@atmospherics.com"
host: "studentinfo.atmospherics.com"
basePath: "/v1"
tags:
- name: "Course"
  description: "Everything about available courses"
  externalDocs:
    description: "Find out more"
    url: "http://studentinfo.atmoshperics.com/courses"
- name: "Student"
  description: "Student Information"
schemes:
- "https"
- "http"
paths:
  /cloud:
    post:
      tags:
      - "Course"
      summary: "Add a new course to the course catalog"
      description: ""
      operationId: "addCourse"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Course object that needs to be added to the course catalog"
        required: true
        schema:
          $ref: "#/definitions/Course"
      responses:
        405:
          description: "Invalid input"
      security:
      - api_auth:
        - "write:courses"
        - "read:courses"
    put:
      tags:
      - "Course"
      summary: "Update an existing course"
      description: ""
      operationId: "updateCourse"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Course object that needs to be updated to the catalog"
        required: true
        schema:
          $ref: "#/definitions/Course"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Course not found"
        405:
          description: "Validation exception"
      security:
      - api_auth:
        - "write:courses"
        - "read:courses"
  /course/findByStatus:
    get:
      tags:
      - "Course"
      summary: "Finds Courses by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findCoursesByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "open"
          - "closed"
          - "waitlist"
          - "canceled"
          default: "open"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Course"
        400:
          description: "Invalid status value"
      security:
      - api_auth:
        - "write:courses"
        - "read:courses"
  /course/findByDepartments:
    get:
      tags:
      - "Course"
      summary: "Finds Courses by departments"
      description: "Muliple departments can be provided with comma separated list."
      operationId: "findCoursesByDepartments"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "departments"
        in: "query"
        description: "Departments to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Course"
        400:
          description: "Invalid department value"
      security:
      - api_auth:
        - "write:courses"
        - "read:courses"
  /course/{courseId}:
    get:
      tags:
      - "Course"
      summary: "Find course by ID"
      description: "Returns a single course"
      operationId: "getCourseById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "courseId"
        in: "path"
        description: "Course ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Course"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Course not found"
      security:
      - api_key: []
    delete:
      tags:
      - "Course"
      summary: "Deletes a course"
      description: ""
      operationId: "deleteCourse"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "courseId"
        in: "path"
        description: "Course ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Course not found"
      security:
      - api_auth:
        - "write:courses"
        - "read:courses"
  /student:
    post:
      tags:
      - "Student"
      summary: "Add a student"
      description: "Add a student."
      operationId: "addStudent"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "add a student object"
        required: true
        schema:
          $ref: "#/definitions/Student"
      responses:
        default:
          description: "successful operation"

  /student/{studentId}:
    get:
      tags:
      - "Student"
      summary: "Get student by studentId"
      description: ""
      operationId: "getStudentById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "studentId"
        in: "path"
        description: "Student ID"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Student"
        400:
          description: "Invalid id supplied"
        404:
          description: "Student not found"
    put:
      tags:
      - "Student"
      summary: "Update student"
      description: "Update an existing student record."
      operationId: "updateStudent"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "studentId"
        in: "path"
        description: "Student ID"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated student object"
        required: true
        schema:
          $ref: "#/definitions/Student"
      responses:
        400:
          description: "Invalid student supplied"
        404:
          description: "Student not found"
    delete:
      tags:
      - "Student"
      summary: "Delete student"
      description: "Delete a student"
      operationId: "deleteStudent"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "studentId"
        in: "path"
        description: "Student ID"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid id supplied"
        404:
          description: "Student not found"
securityDefinitions:
  api_auth:
    type: "oauth2"
    authorizationUrl: "http://studentinfo.atmoshperics.com/oauth/dialog"
    flow: "implicit"
    scopes:
      write:courses: "modify courses in the course catalog"
      read:courses: "read courses"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Student:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      status:
        type: "integer"
        format: "int32"
        description: "Student Status"
    xml:
      name: "Student"
  Course:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Artificial Intelligence"
      department:
        type: "string"
      status:
        type: "string"
        description: "Course status"
        enum:
        - "open"
        - "closed"
        - "waitlist"
        - "canceled"        
    xml:
      name: "Course" 