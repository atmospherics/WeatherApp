/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.atmos.WeatherApp.api;

import com.atmos.WeatherApp.model.Student;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-12-18T00:27:16.231-05:00")

@Api(value = "student", description = "the student API")
public interface StudentApi {

    @ApiOperation(value = "Add a student", nickname = "addStudent", notes = "Add a student.", tags={ "Student", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/student",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addStudent(@ApiParam(value = "add a student object" ,required=true )  @Valid @RequestBody Student body);


    @ApiOperation(value = "Delete student", nickname = "deleteStudent", notes = "Delete a student", tags={ "Student", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid id supplied"),
        @ApiResponse(code = 404, message = "Student not found") })
    @RequestMapping(value = "/student/{studentId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteStudent(@ApiParam(value = "Student ID",required=true) @PathVariable("studentId") String studentId);


    @ApiOperation(value = "Get student by studentId", nickname = "getStudentById", notes = "", response = Student.class, tags={ "Student", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Student.class),
        @ApiResponse(code = 400, message = "Invalid id supplied"),
        @ApiResponse(code = 404, message = "Student not found") })
    @RequestMapping(value = "/student/{studentId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Student> getStudentById(@ApiParam(value = "Student ID",required=true) @PathVariable("studentId") String studentId);


    @ApiOperation(value = "Update student", nickname = "updateStudent", notes = "Update an existing student record.", tags={ "Student", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid student supplied"),
        @ApiResponse(code = 404, message = "Student not found") })
    @RequestMapping(value = "/student/{studentId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateStudent(@ApiParam(value = "Student ID",required=true) @PathVariable("studentId") String studentId,@ApiParam(value = "Updated student object" ,required=true )  @Valid @RequestBody Student body);

}
