/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.atmos.WeatherApp.api;

import com.atmos.WeatherApp.model.Course;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-12-18T00:27:16.231-05:00")

@Api(value = "course", description = "the course API")
public interface CourseApi {

    @ApiOperation(value = "Deletes a course", nickname = "deleteCourse", notes = "", authorizations = {
        @Authorization(value = "api_auth", scopes = {
            @AuthorizationScope(scope = "read:courses", description = "read courses"),
            @AuthorizationScope(scope = "write:courses", description = "modify courses in the course catalog")
            })
    }, tags={ "Course", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Course not found") })
    @RequestMapping(value = "/course/{courseId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCourse(@ApiParam(value = "Course ID",required=true) @PathVariable("courseId") Long courseId,@ApiParam(value = "" ) @RequestHeader(value="api_key", required=false) String apiKey);


    @ApiOperation(value = "Finds Courses by departments", nickname = "findCoursesByDepartments", notes = "Muliple departments can be provided with comma separated list.", response = Course.class, responseContainer = "List", authorizations = {
        @Authorization(value = "api_auth", scopes = {
            @AuthorizationScope(scope = "read:courses", description = "read courses"),
            @AuthorizationScope(scope = "write:courses", description = "modify courses in the course catalog")
            })
    }, tags={ "Course", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Course.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid department value") })
    @RequestMapping(value = "/course/findByDepartments",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Course>> findCoursesByDepartments(@NotNull @ApiParam(value = "Departments to filter by", required = true) @Valid @RequestParam(value = "departments", required = true) List<String> departments);


    @ApiOperation(value = "Finds Courses by status", nickname = "findCoursesByStatus", notes = "Multiple status values can be provided with comma separated strings", response = Course.class, responseContainer = "List", authorizations = {
        @Authorization(value = "api_auth", scopes = {
            @AuthorizationScope(scope = "read:courses", description = "read courses"),
            @AuthorizationScope(scope = "write:courses", description = "modify courses in the course catalog")
            })
    }, tags={ "Course", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Course.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value") })
    @RequestMapping(value = "/course/findByStatus",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Course>> findCoursesByStatus(@NotNull @ApiParam(value = "Status values that need to be considered for filter", required = true, allowableValues = "open, closed, waitlist, canceled") @Valid @RequestParam(value = "status", required = true) List<String> status);


    @ApiOperation(value = "Find course by ID", nickname = "getCourseById", notes = "Returns a single course", response = Course.class, authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "Course", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Course.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Course not found") })
    @RequestMapping(value = "/course/{courseId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Course> getCourseById(@ApiParam(value = "Course ID",required=true) @PathVariable("courseId") Long courseId);

}
